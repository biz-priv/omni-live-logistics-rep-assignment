service: omni-live-rep-assignment-refact


provider:
  name: aws
  runtime: python3.9
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${ssm:sls-deployment-bucket-${self:provider.stage}}
    serverSideEncryption: AES256
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ssm:GetParameter
      Resource: "*"
    - Effect: "Allow"
      Action:
        - sts:AssumeRole
      Resource: "arn:aws:iam::332281781429:role/rep-assignement-test"
 

  # role: ${ssm:/omni-dw/${self:provider.stage}/lambda/role}
  # vpc:
  #   securityGroupIds:
  #     - ${ssm:/omni-dw/${self:provider.stage}/lambda/sgId}
  #   subnetIds:
  #     - ${ssm:/omni-dw/${self:provider.stage}/lambda/subnetA}

package:
  individually: true

# layers:
#   OmniLiveLogistics:
#     path: lambdaLayer/lib/python3.7
#     compatibleRuntimes:
#       - python3.7
#     description: "Dependencies jsonpath_rw for python functions"

functions:
  omni_live_logistics_establish_metrics-refact: ${file(config/functions/establish-metrics.yml):function}
  # omni_live_update-dispatcher_metrics-refact: ${file(config/functions/update-dispatcher.yml):function}
  # omni_live_logistics_toggle-refact: ${file(config/functions/toggle.yml):function}
  # omni_live_logistics_getdata-refact: ${file(config/functions/getdata.yml):function}

resources:
  Resources:
    UserMetricTable: ${file(config/dynamodb/user-metric-table.yml):UserMetricTable}

custom:
  pythonRequirements:
    dockerizePip: true